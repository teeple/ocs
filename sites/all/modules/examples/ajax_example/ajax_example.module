<?php

/**
 * Implements hook_menu().
 *
 * Sets up calls to drupal_get_form() for all our example cases.
 *
 * @see menu_example.module for more details on hook_menu().
 */
function ajax_example_menu() {
  $items = array();

  $items['examples/ajax_example'] = array(
    'title' => 'AJAX Example',
    'page callback' => 'ajax_example_intro',
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  // Change the description of a form element.
  $items['examples/ajax_example/simplest'] = array(
    'title' => 'Simplest AJAX Example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_example_simplest'),
    'access callback' => TRUE,
    'weight' => 0,
  );

  return $items;
}

function ajax_example_intro() {
  $markup = t('The AJAX example module provides many examples of AJAX including forms, links, and AJAX commands.');
  return $markup;
}

/**
 * Simple form whose ajax-enabled 'changethis' member causes a text change
 * in the description of the 'replace_textfield' member.
 * See @link http://drupal.org/node/262422 Form API Tutorial @endlink
 */
function ajax_example_simplest($form, &$form_state) {
  $form = array();
  $form['changethis'] = array(
    '#title' => t("Choose something and explain why"),
    '#type' => 'select',
    '#options' => array(
      'one' => 'one',
      'two' => 'two',
      'three' => 'three',
    ),
    '#ajax' => array(
      // #ajax has two required keys: callback and wrapper.
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'ajax_example_simplest_callback',
      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'replace_textfield_div',
      // There are also several optional keys - see ajax_example_autocheckboxes
      // below for details on 'method', 'effect' and 'speed' and
      // ajax_example_dependent_dropdown for 'event'.
     ),
  );

    $form['customer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Customer'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $form['customer']['id'] = array(
        '#type' => 'textfield',
        '#title' => t('Customer ID'),
    );

    $form['customer']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Customer Name'),
        '#ajax' => array(
            'callback' => 'ajax_textfield_callback2',
            'wrapper' => 'replace_field_3',
            'keypress' => TRUE,
        ),
    );

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['replace_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t("Why"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
    '#ajax' => array(
        'callback' => 'ajax_textfield_callback',
        'wrapper' => 'replace_field_2',
        'keypress' => TRUE,
    ),
  );

  $form['markup'] = array(
    '#type' => 'markup',
    '#markup' => 'before',
    '#prefix' => '<div id="replace_field_2">',
    '#suffix' => '</div>',
  );

  $form['markup2'] = array(
    '#type' => 'markup',
    '#markup' => 'before2',
    '#prefix' => '<div id="replace_field_3">',
    '#suffix' => '</div>',
  );

  // An AJAX request calls the form builder function for every change.
  // We can change how we build the form based on $form_state.
  if (!empty($form_state['values']['changethis'])) {
    $form['replace_textfield']['#description'] = t("Say why you chose '@value'", array('@value' => $form_state['values']['changethis']));
  }

  if ( !empty( $form_state['values']['replace_textfield'])) {
      $form['markup']['#markup'] = $form_state['values']['replace_textfield']. kpr( $form_state, TRUE);
  }

  if ( !empty( $form_state['values']['name'])) {
      $form['markup2']['#markup'] = $form_state['values']['name'];
  }

  return $form;
}

function ajax_textfield_callback( $form, &$form_state)
{
    return $form['markup'];
}

function ajax_textfield_callback2( $form, &$form_state)
{
    return $form['markup2'];
}

/**
 * Callback for ajax_example_simplest.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the textfield element)
 */
function ajax_example_simplest_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['replace_textfield'];
}

/* 
** for testing form building
*/
function ajax_example_simplest2($form, &$form_state) 
{
    $form['customer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Customer'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $form['customer']['id'] = array(
        '#type' => 'textfield',
        '#title' => t('Customer ID'),
    );

    $form['customer']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Customer Name'),
        '#ajax' => array(
            'callback' => 'ocs_account_add_form_callback',
            'wrapper' => 'replace_customer_list_div',
            'keypress' => TRUE,
        ),
    );

    $form['customer']['list'] = ocs_account_get_table();

    /*
    $form['customer']['list'] = array(
        '#type' => 'markup',
        '#markup' => 'before',
        '#prefix' => '<div id="replace_customer_list_div">',
        '#suffix' => '</div>',
    );
    */

    $form['product'] = array(
        '#type' => 'fieldset',
        '#title' => t('Product'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $form['product']['id'] = array(
        '#type' => 'textfield',
        '#title' => t('Product ID'),
    );

    $form['product']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Product Name'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    if ( !empty( $form_state['values']['customer']['name'])) {
        $form['customer']['list'] = ocs_account_get_table( $form_state['values']['customer']['name']);
    }

    return $form;
}

/*
function ocs_account_get_table( $name = NULL) 
{
    $header = array(
        'Name',
    );
    $options = array();
    $options[0] = array(
        'Name' => array(
            'data' => array(
                '#type' => 'textfield',
                '#default_value' => $name,
            ),
        ),
    );

    return array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t('No content available.'),
        '#prefix' => '<div id="replace_customer_list_div">',
        '#suffix' => '</div>',
    );
}
*/

/*
** ajax callback 
*/
/*
function ocs_account_add_form_callback( $form, $form_state)
{
    return 'REPLACED'. kpr( $form_state, TRUE);
}
*/
