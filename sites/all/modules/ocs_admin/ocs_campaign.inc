<?php


/*
** campaign list
*/
function ocs_admin_campaign_overview() 
{
    $result = array(
        array( 'title' => 'First call campaign',
            'description' => 'Give bonus when a user makes a first call',
            'campaign_name' => 'first_call_1',
            'campaign_id' => '1',
            ),
        array( 'title' => 'Recharge bonus campaign',
            'description' => 'Give 100 SMS for 3 consequent recharges',
            'campaign_name' => 'rechrage_1',
            'campaign_id' => '2',
            ),
    );

    $header = array( t('Campaign'), array('data' => t('Operations'), 'colspan' => '3'));
    $rows = array();
    foreach( $result as $item) {
        $row = array( theme( 'ocs_admin_group_overview', 
            array( 'title' => $item['title'],
                'name' => $item['campaign_name'],
                'description' => $item['description'])));
        $row[] = array( 'data' => l(t('edit'), 'ocs_admin/campaign/'. $item['campaign_id'] . '/edit'), 
            'class' => 'operation-list');
        $row[] = array( 'data' => l(t('rules'), 'ocs_admin/campaign/'. $item['campaign_id'] . '/rule'), 
            'class' => 'operation-list');
        $row[] = array( 'data' => l(t('disable'), 'ocs_admin/campaign/'. $item['campaign_id'] . '/disable'), 
            'class' => 'operation-list');
        $rows[] = $row;
    }

    return array(
        'active' => array(
            '#markup' => '<h3>Active Campaigns</h3>'.
                theme( 'table', array( 'header' => $header, 'rows' => $rows)),
            ),
         'inactive' => array(
            '#markup' => '<br><h3>Inactive Campaigns</h3>'.
                theme( 'table', array( 'header' => $header, 'rows' => $rows)),
            ),
    );
}

function ocs_admin_campaign_rule_page( $campaign_id)
{ 
    $form = drupal_get_form( 'ocs_admin_campaign_rule_form', $campaign_id);
    $page = array(
         'rule' => array(
            '#markup' => drupal_render( $form),
            ),
    );

    return $page;
}

/*
** campaign rules form
*/
function ocs_admin_campaign_rule_form( $form, &$form_state, $campaign_id = NULL)
{
  $form['#attached']['css'] = array(drupal_get_path('module', 'ocs_admin') . '/ocs_admin.css');

  $form['#description'] = '<p>Edit Campaign Rules</p>';

  // get all events
  $event = ocs_admin_campaign_events_load_all( $campaign_id);

  foreach( $event as $key => $item) {
    $records = array();
    $node = node_load( $item['event_id']);
    $client = taxonomy_term_load( $node->field_ocs_client_id['und'][0]['tid']);

    $info = array(
        'title' => $node->title,
        'name' => $client->name,
        'description' => t( '<em>%event</em> event generated by the system <em>%client</em>',
            array( '%event' => $node->title, '%client' => $client->name)),
        '#attributes' => array( 'class' => array('menu-enabled')),
        'weight' => array(
            '#type' => 'weight',
            '#delta' => 50,
//        '#default_value' => $item['weight'],
            '#default_value' => 50,
            '#title_display' => 'invisible',
            '#title' => t('Weight for @title', array('@title' => $node->title)),
      ),
  	);

    $event[ $key] = array_merge( $event[$key], $info);

    // Build a list of operations
    $operations = array();
    $operations['delete'] = array( 
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => t( 'ocs_admin/campaign/@campaign/event/@event/delete',
		  array( '@campaign' => $item['campaign_id'],
			  '@event' => $item['event_id'])),
      '#options' => array( 'query' => array( 'event_name' => $node->title)),
	  );

    $event[ $key]['operations'] = $operations;
  }
  $form['#event']['#records'] = $event;
  $form['#event']['#caption'] = '<h3>Events</h3>';
  $form['#event']['#empty_text'] = t('There are no events yet.');

  // add footer
  $form['#event']['#footer'] = t('<ul class="action-links">'.
    '<li><a href="@rule">Add Event</a></li>'. '</ul>',
        array( '@rule' => url( 'ocs_admin/campaign/'. $campaign_id . '/rule/event'))
    );


  // get all conditions
  $cond = ocs_admin_campaign_conditions_load_all( $campaign_id);

  $tree = ocs_admin_build_tree( $cond, array(
	'title' => 'cond_name',
	'plid' => 'parent_id',
	'mlid' => 'cond_id',
  ));

  $form = array_merge( $form, _ocs_campaign_tree_form($tree));
  $form['#caption'] = 'Conditions';

  if ( ! element_children($form)) {
    $form['#empty_text'] = t('There are no campaign rules yet. <a href="@link">Add Conditions</a>.', 
        array('@link' => url('ocs_admin/campaign/'. $campaign_id .'/cond/add')));
  }

  // add footer
  drupal_add_library( 'system', 'drupal.ajax');
  $form['#footer'] = t('<ul class="action-links">'.
    '<li><a href="@rule">Add Condition</a></li>'.
    '<li>!and</li>'.
    '<li>!or</li>'.'</ul>',
        array( '@rule' => url( 'ocs_admin/campaign/'. $campaign_id . '/cond/add'),
            '!and' => l( t('Add AND'), 
				t('ocs_admin/campaign/@campaign/rule/nojs/and/add', array( '@campaign' => $campaign_id)),
				array( 'html' => TRUE, 'attributes' => array( 'class' => array( 'use-ajax')))),
            '!or' => l( t('Add OR'), 
				t('ocs_admin/campaign/@campaign/rule/nojs/or/add', array( '@campaign' => $campaign_id)),
				array( 'html' => TRUE, 'attributes' => array( 'class' => array( 'use-ajax')))),
			)
    );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    );

   return $form;
}


function ocs_admin_campaign_event_form( $form, &$form_state, $campaign_id)
{
    $form['body'] = array(
        '#type' => 'markup',
        '#markup' => t( 'Select the event to add.'),
    );

    $form['campaign_id'] = array(
        '#type' => 'hidden',
        '#value' => $campaign_id,
    );

    $items = entity_load('node', FALSE, array('type' => 'ocs_events'));
    $options = array();
    foreach( $items as $item) {
        $client = taxonomy_term_load( $item->field_ocs_client_id['und'][0]['tid']);
//        dpm( $client, 'client');
        $options[$client->name][$item->nid] = $item->title;
    }

	$form['event_id'] = array(
		'#type' => 'select',
		'#title' => t('React on event'),
		'#options' => $options,
		'#description' => t('Whenever the event occurs, rule evaluation is trigged'),
	);

	/*
  	$event_status = ocs_admin_campaign_events_load_all( $campaign_id);
	dpm( $event_status, 'event');

	foreach( $options as $client => $events) {
		$form[$client] = array(
			'#type' => 'fieldset',
			'#title' => $client . ' Events',
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
		);

		$form[$client][$client.'event_id'] = array(
			'#type' => 'checkboxes',
			'#title' => t('React on event'),
			'#options' => $events,
			'#default_value' => array_keys( $event_status),
			'#description' => t('Whenever the event occurs, rule evaluation is trigged'),
		);
	}
	*/

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save configuration'),
    );

    return $form;
}

function ocs_admin_campaign_event_form_submit( $form, &$form_state)
{
    dpm( $form_state['values'], 'form_state');
    $event = $form_state['values'];

    ocs_admin_campaign_event_save( $event);

    $form_state['redirect'] = 'ocs_admin/campaign/' . $event['campaign_id'] .'/rule';
}

/*
    get condition list
*/
function ocs_admin_campaign_events_load_all( $campaign_id)
{
    db_set_active('ocsdb');

    // get group information
    $query = db_select( 'ocs_campaign_events', 'c');
    $result = $query->condition( 'c.campaign_id', $campaign_id, '=')
        ->fields( 'c')
        ->execute()
        ->fetchAllAssoc( 'event_id', PDO::FETCH_ASSOC);
    

    db_set_active( 'default');

    return $result;
}

/*
    get condition list
*/
function ocs_admin_campaign_conditions_load_all( $campaign_id)
{
    db_set_active('ocsdb');

    // get group information
    $query = db_select( 'ocs_campaign_conditions', 'c');
    $result = $query->condition( 'c.campaign_id', $campaign_id, '=')
        ->fields( 'c')
        ->execute()
        ->fetchAllAssoc( 'cond_id', PDO::FETCH_ASSOC);

//    dpm( $result, 'result');

    db_set_active( 'default');

    return $result;
}

/**
 * Recursive helper function for ocs_group_form().
 *
 * @param $tree
 *   The menu_tree retrieved by menu_tree_data.
 */
function _ocs_campaign_tree_form($tree) 
{
//	dpm( $tree, 'condition tree');

  $form = &drupal_static(__FUNCTION__, array('#tree' => TRUE));
  foreach ($tree as $data) {
    $title = '';
    $item = $data;
    if ($item ) {
      $mlid = 'mlid:' . $item['mlid'];
      $form[$mlid]['#item'] = $item;
      $form[$mlid]['#attributes'] = array( 'class' => array('menu-enabled'));
      $form[$mlid]['title']['#markup'] = $item['title'];
      $form[$mlid]['weight'] = array(
        '#type' => 'weight',
        '#delta' => 50,
//        '#default_value' => $item['weight'],
        '#default_value' => 50,
        '#title_display' => 'invisible',
        '#title' => t('Weight for @title', array('@title' => $item['title'])),
      );
       $form[$mlid]['mlid'] = array(
        '#type' => 'hidden',
        '#value' => $item['mlid'],
      );
      $form[$mlid]['plid'] = array(
        '#type' => 'hidden',
        '#default_value' => $item['plid'],
      );
      // Build a list of operations
      $operations = array();

	  if ( $item['title'] == 'OR' || $item['title'] == 'AND') {
		  $operations['edit'] = array(
			'#type' => 'markup',
			'#markup' => '',
		  );
		  $operations['delete'] = array(
			'#type' => 'link',
			'#title' => t('delete'),
			'#href' => t( 'ocs_admin/campaign/@campaign/rule/nojs/@cond/delete',
				array( '@campaign' => $data['db']['campaign_id'],
					'@cond' => $item['mlid'])),
			'#options' => array( 'html' => TRUE, 
				'attributes' => array( 'class' => array( 'use-ajax'))),
		  );
	  }
	  else {
		  $operations['edit'] = array( 
			'#type' => 'link',
			'#title' => t('edit'),
			'#href' => t( 'ocs_admin/campaign/@campaign/cond/@cond/edit',
				array( '@campaign' => $data['db']['campaign_id'],
					'@cond' => $item['mlid'])),
			'#options' => array( 'query' => array( 'name' => $item['title'])),
			);
		  $operations['delete'] = array( 
			'#type' => 'link',
			'#title' => t('delete'),
			'#href' => t( 'ocs_admin/campaign/@campaign/cond/@cond/delete',
				array( '@campaign' => $data['db']['campaign_id'],
					'@cond' => $item['mlid'])),
			'#options' => array( 'query' => array( 'name' => $item['title'])),
			);
	  }
      $form[$mlid]['operations'] = $operations;  
    }

    if ( isset($data['below'])) {
      _ocs_campaign_tree_form($data['below']);
    }
  }
  return $form;
}

function ocs_admin_campaign_rule_form_validate( $form, &$form_state)
{
	if ( $form_state['values']['op'] != 'Cancel') {
		dpm( $form_state['values'], 'form state');
		$child_count = array();
		foreach( element_children( $form) as $mlid) {
			if ( isset( $form[$mlid]['#item'])) {
				$element = $form[$mlid];
				$plid =  'mlid:' . $element['plid']['#value'];
				if ( $element['plid']['#value'] != 0) $child_count[$plid][] = $mlid;
				if ( ! isset($child_count[$mlid])) $child_count[$mlid] = array();
				dsm( $element['#item']['title'] . ': ' .$plid . '->' . $mlid . '  '. $element['plid']['#default_value']);
			}
		}

		dpm( $child_count, 'child count');
		foreach( $child_count as $mlid => $child) {
			$element = $form[$mlid]['#item'];
			if ( $element['title'] == 'AND' || $element['title'] == 'OR') {
				if ( count( $child) < 2) {
					form_set_error( $mlid, t( 'Invalid @op condition. More than 2 operands are required.', array( '@op' => $element['title'])));
				}
			}
			else {
				if ( count( $child) != 0) {
					form_set_error( $mlid, t( 'Invalid condition: "@op". No operands are allowed.', array( '@op' => $element['title'])));
				}
			}
		}
	}
}


function ocs_admin_campaign_rule_form_submit( $form, &$form_state)
{
	if ( $form_state['values']['op'] != 'Cancel') {
		dpm( $form_state, 'form_state submit');

		$order = array_flip( array_keys( $form_state['input']));
		dpm( $order, 'order');

		$form = array_merge( $order, $form);

		$updated_items = array();
		$fields = array( 'plid' => 'parent_id');

		foreach( element_children( $form) as $mlid) {
			if ( isset( $form[$mlid]['#item'])) {
				$element = $form[$mlid];
				// update any fields that have changed in this menu item.
				//dpm( $element['#item']['db'], 'element');
				foreach( $fields as $field => $db_field) {
					if ( $element[$field]['#value'] != $element[$field]['#default_value']) {
						$element['#item']['db'][$db_field] = $element[$field]['#value'];
						$updated_items[$mlid] = $element['#item'];
					}
				}
			}
		}

		dpm( $updated_items, 'updated');

		foreach( $updated_items as $item) {
			ocs_admin_campaign_condition_save( $item['db']);
		}

		drupal_set_message( t('Your configuration has been saved.'));
	}
}

/**
 * Returns HTML for the campaign overview  form into a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_ocs_admin_campaign_overview( $variables) 
{
    $output = check_plain( $variables['title']);
    $output .= '<div class="description">' . filter_xss_admin($variables['description']). '</div>';

    return $output;
}


/**
 * Returns HTML for the campaign rules  form into a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_ocs_admin_campaign_rule_form($variables) 
{
    $form = $variables['form'];
    $header = array(
        t('Name'),
        t('Weight'),
        array( 'data' => t('Operations'), 'colspan' => '3'),
    );

    // event table
    $output = ocs_admin_table_theme( $form['#event'], $header);
    $output .= '<br><div id="ocs_admin_campaign_cond_div">'. 
		ocs_admin_tree_table_theme( $form, $header) . '</div>' ;

    return $output;
}

/*
** Add/Edit campaign rules
*/
function ocs_admin_campaign_rule_edit_form( $form, &$form_state, $type, $campaign_id)
{
    if ( $type == 'edit') {
        // load campaign data
        $campaign = NULL;
    }

    $form['campaign_id'] = array(
        '#type' => 'hidden',
        '#value' => $campaign_id,
    );

    $form['cond_id'] = array(
        '#type' => 'hidden',
        '#value' => isset( $campaign) ? $campaign['cond_id'] : 0,
    );

    $form['parent_id'] = array(
        '#type' => 'hidden',
        '#value' => isset( $campaign) ? $campaign['parent_id'] : 0,
    );

    $form['cond_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Rule Name',
        '#description' => t('Enter Rule Name'),
        '#default_value' => isset( $campaign) ? $campaign['cond_name'] : NULL,
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    return $form;
}

function ocs_admin_campaign_rule_edit_form_submit( $form, &$form_state)
{
    $campaign = $form_state['values'];
    dpm( $campaign, 'submit campaign');
    ocs_admin_campaign_rule_save($campaign);

    drupal_set_message( t('Your configuration has been saved.'));

    $form_state['redirect'] = 'ocs_admin/campaign/' . $campaign['campaign_id'];
}


/*
** Add/Edit campaign properties
*/
function ocs_admin_campaign_edit_form( $form, &$form_state, $op, $campaign_id = NULL)
{
	$campaign = ocs_admin_campaign_load( $campaign_id);

    $form['campaign_id'] = array(
        '#type' => 'hidden',
        '#value' => $campaign_id,
    );

    $form['campaign_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#default_value' => $campaign['campaign_name'],
    );

    $form['description'] = array(
        '#type' => 'textfield',
        '#title' => 'Description',
        '#default_value' => $campaign['description'],
    );

    $form['status'] = array(
        '#type' => 'select',
        '#title' => 'Status',
        '#options' => array(
			'0' => 'Disabled',
			'1' => 'Enabled',
			),
        '#default_value' => $campaign['status'],
    );

	$date_str = isset($campaign['start_date']) ? $campaign['start_date'] : date( 'Y-m-d', time());
	dpm( $date_str, 'date str');
	$form['start_date'] = array(
		'#type' => 'date',
		'#title' => 'Start Date',
		'#default_value' => date_parse( $date_str),
	);

	$date_str = isset($campaign['end_date']) ? $campaign['end_date'] : date( 'Y-m-d', time());
	$form['end_date'] = array(
		'#type' => 'date',
		'#title' => 'End Date',
		'#default_value' => date_parse( $date_str),
	);

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
    );

    return $form;
}


function ocs_admin_campaign_edit_form_validate( $form, &$form_state)
{
	if ( $form_state['values']['op'] != 'Cancel') {
		// check start & end date
	}
}


function ocs_admin_campaign_edit_form_submit( $form, &$form_state)
{
    $values = $form_state['values'];
	if ( $values['op'] != 'Cancel') {
		$values['start_date'] = sprintf( '%04d-%02d-%02d', $values['start_date']['year'] , 
				$values['start_date']['month'] , $values['start_date']['day']);
		$values['end_date'] = sprintf( '%04d-%02d-%02d', $values['end_date']['year'] , 
				$values['end_date']['month'] , $values['end_date']['day']);

		ocs_admin_campaign_save($values);

		drupal_set_message( t('Your configuration has been saved.'));

		$form_state['redirect'] = 'ocs_admin/campaign/' . $values['campaign_id'];

	}
}


function ocs_admin_campaign_load( $campaign_id)
{
    db_set_active('ocsdb');

    // get group information
    $query = db_select( 'ocs_campaign', 'c');
    $result = $query->condition( 'c.campaign_id', $campaign_id, '=')
        ->fields( 'c')
        ->execute()
        ->fetchAssoc( 'event_id', PDO::FETCH_ASSOC);
    
    db_set_active( 'default');

    return $result;
}

function ocs_admin_campaign_save( $campaign)
{
    db_set_active('ocsdb');

	$data = array();
	foreach( array( 'campaign_name', 'description', 'status', 'start_date', 'end_date') as $key) {
		$data[ $key] = $campaign[ $key];
	}

	$result = db_merge( 'ocs_campaign')
		->key( array( 'campaign_id' => $campaign['campaign_id']))
		->fields( $data)
		->execute();

    db_set_active( 'default');

    return $result;
}


/*
** delete campaign
*/
function ocs_admin_campaign_delete_form( $form, &$form_state, $campaign_id)
{
	$campaign = ocs_admin_campaign_load( $campaign_id);

    $form['#campaign'] = $campaign;

    $caption = '<p>'. t('This action cannot be undone...') . '</p>';

    return confirm_form( $form, t('Are you sure to delete the campaign "@name"?', 
				array( '@name' => $campaign['campaign_name'])),
			'ocs_admin/campaign/list', $caption, t('Delete'));
}

function ocs_admin_campaign_delete_form_submit( $form, &$form_state)
{
    $campaign = $form['#campaign'];

	ocs_admin_campaign_delete( $campaign['campaign_id']);

    $t_args = array( '%name' => $campaign['campaign_name']);
    drupal_set_message( t('The campaign %name has been deleted.', $t_args));
    watchdog( 'ocs_admin', 'Deleted campaign %name.', $t_args, WATCHDOG_NOTICE);

	$form_state['redirect'] = 'ocs_admin/campaign/list';
}

function ocs_admin_campaign_delete( $campaign_id)
{
    db_set_active( 'ocsdb');

    // delete the group and all subgroups
    $status = db_delete( 'ocs_campaign')
        ->condition( 'campaign_id', $campaign_id)
        ->execute();
    dpm( $status, 'db_delete result');

    db_set_active( 'default');
}

/*
** delete an event
*/
function ocs_admin_campaign_event_delete_confirm( $form, &$form_state, $campaign_id, $event_id)
{
	$event_name = isset( $_GET['event_name']) ? $_GET['event_name'] : $event_id;

    $form['#campaign_id'] = $campaign_id;
    $form['#event_id'] = $event_id;
    $form['#event_name'] = $event_name;
    $caption = '<p>' . 
            t('<strong>Warning:</strong> The event "%key" will be deleted from the Campaign.',
                array( '%key' => $event_name)) .
            '</p>';

    $caption .= '<p>'. t('This action cannot be undone.') . '</p>';

    return confirm_form( $form, t('Are you sure to delete the event "%key"?',
        array( '%key' => $event_name)),
        'ocs_admin/campaign/' . $campaign_id . '/rule',
        $caption, t('Delete'));
}

function ocs_admin_campaign_event_delete_confirm_submit( $form, &$form_state)
{
    $campaign_id = $form['#campaign_id'];
    $event_id = $form['#event_id'];
    $event_name = $form['#event_name'];
    ocs_admin_campaign_delete_event( $campaign_id, $event_id);

    drupal_set_message( t('The event %key has been removed from the Campaign.', 
			array( '%key' => $event_name)));

    $form_state['redirect'] = 'ocs_admin/campaign/' . $campaign_id . '/rule';
}

function ocs_admin_campaign_delete_event( $campaign_id, $event_id)
{
    db_set_active( 'ocsdb');

	// delete event from campaign
	$result = db_delete( 'ocs_campaign_events')
		->condition( 'campaign_id', $campaign_id, '=')
		->condition( 'event_id', $event_id, '=')
		->execute();
	dpm( $result, 'ocs_campaign_event result');

    db_set_active( 'default');
}


function ocs_admin_campaign_add_cond_form( $form, &$form_state, $campaign_id = NULL, $cond_id=NULL)
{
	$options = &drupal_static( __FUNCTION__ . 'options', array());
	$paramlist = &drupal_static( __FUNCTION__ . 'param', array());

	$cond = isset( $form_state['values']['cond']) ? $form_state['values']['cond'] : NULL;

	if ( empty( $options) || empty( $param)) {
		$events = ocs_admin_campaign_events_load_all( $campaign_id);
//		dpm( $events, 'events');

		foreach( array_keys($events) as $event_id) {
			$node = node_load( $event_id);
	//		dpm( $node, 'node');

			foreach( $node->field_ocs_param_ref['und'] as $param) {
				$para = node_load( $param['target_id']);
				// store select options
				$key = $event_id . ':' . $param['target_id'];
				$options[ $node->title][ $key] = $node->title . ' : ' . $para->title;
				// store parameter info
				$paramlist[$para->nid] = $para;
				$paramlist[$key] = $node->title . ' : ' . $para->title;
				if ( ! isset( $cond)) {
					$cond = $event_id . ':' . $param['target_id'];
				}
			}
		}
	}

	if ( isset( $cond_id)) {
		$condition = ocs_admin_campaign_cond_load( $cond_id);
		dpm( $condition, 'condition');
	}

//	dpm( $options, 'options');
	$form = array();

	$form['#campaign_id'] = $campaign_id;
	$form['#paramlist'] = $paramlist;
	$form['#cond_id'] = $cond_id;

	$form['cond'] = array(
		'#type' => 'select',
		'#title' => t('Conditions'),
		'#options' => $options,
		'#default_value' => isset($condition) ? $condition['event_id'].':'.$condition['param_id'] : $cond,
		'#ajax' => array(
			'callback' => 'ocs_admin_ajax_condition_operator',
			'wrapper' => 'replace_operator_div',
			),
	);

	$form['operator'] = array(
		'#type' => 'select',
		'#title' => 'Operator',
		'#options' => _campaign_operator( $paramlist, $cond),
		'#default_value' => isset($condition) ? $condition['operator'] : NULL,
		'#prefix' => '<div id="replace_operator_div">',
		'#suffix' => '</div>',
	);

	$form['value'] = array(
		'#type' => 'textfield',
		'#title' => 'Value',
		'#size' => 30,
		'#default_value' => isset($condition) ? $condition['value'] : NULL,
	);

	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save configuration'),
	);

	$form['actions']['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
	);

	return $form;
}

function _campaign_operator( $paramlist, $selected)
{
//	dpm( $paramlist, 'param');
	$oplist = array(
		'string' => array(
			'contains', 'equal to', 'not equal to'
			),
		'integer' => array(
			'equal to', 'not equal to', 'greater than', 'less than'
			),
		'enum' => array(
			'contains', 'equal to', 'not equal to'
			),
	);

	$optype = array(
		1 => 'string',
		2 => 'integer',
		3 => 'enum',
	);

	list( $client, $param) = explode( ':', $selected);
	if ( isset( $paramlist[ $param])) {
		$para_info = $paramlist[ $param];
		$type = $optype[ $para_info->field_ocs_param_type['und'][0]['value']];
		return drupal_map_assoc( $oplist[ $type]);
	}

	return drupal_map_assoc( array('unknown parameter type'));
}

function ocs_admin_ajax_condition_operator( $form, $form_state)
{
	return $form['operator'];
}



function ocs_admin_campaign_add_cond_form_submit( $form, &$form_state)
{
	$values = $form_state['values'];
	if ( $values['op'] != 'Cancel') {
		list( $event_id, $param_id) = explode( ':', $values['cond']);
		$cond = array(
			'cond_id' => $form['#cond_id'],
			'campaign_id' => $form['#campaign_id'],
			'event_id' => $event_id,
			'param_id' => $param_id,
			'param_name' => $form['#paramlist'][ $values['cond']],
			'operator' => $values['operator'],
			'value' => $values['value'],
			'cond_name' => t( '@para @op @value', array( 
					'@para' =>  $form['#paramlist'][ $values['cond']],
					'@op' => $values['operator'],
					'@value' => $values['value'])),
		);
		ocs_admin_campaign_condition_save( $cond);
	}

	$form_state['redirect'] = 'ocs_admin/campaign/' . $form['#campaign_id'] . '/rule';
}

/*
    save OCS campaign condition
*/
function ocs_admin_campaign_condition_save( $cond)
{
    db_set_active('ocsdb');

	$result = db_merge( 'ocs_campaign_conditions')
		->key( array( 'cond_id' => $cond['cond_id']))
		->fields( $cond)
		->execute();
    dpm( $result, 'db_merge result');

    db_set_active( 'default');

	return $result;
}


/*
    save OCS campaign event
*/
function ocs_admin_campaign_event_save( $campaign)
{
    db_set_active( 'ocsdb');

    $fields = array( 
        'campaign_id' => isset($campaign['campaign_id']) ? $campaign['campaign_id'] : NULL,
        'event_id' => isset($campaign['event_id']) ? $campaign['event_id'] : 0,
        );

    $status = db_merge( 'ocs_campaign_events')
        ->key( array( 'event_id' => $campaign['event_id']))
        ->fields( $fields)
        ->execute();
    dpm( $status, 'db_merge result');

    db_set_active( 'default');
}
 

function ocs_admin_campaign_cond_delete_confirm( $form, &$form_state, $campaign_id, $cond_id)
{
	$cond_name = isset( $_GET['name']) ? $_GET['name'] : 'Condition ID:' . $cond_id;

    $form['#campaign_id'] = $campaign_id;
    $form['#cond_id'] = $cond_id;
    $form['#cond_name'] = $cond_name;
    $caption = '<p>' . 
            t('<strong>Warning:</strong> The condition "%key" will be deleted from the Campaign.',
                array( '%key' => $cond_name)) .
            '</p>';

    $caption .= '<p>'. t('This action cannot be undone.') . '</p>';

    return confirm_form( $form, t('Are you sure to delete the event "%key"?',
        array( '%key' => $cond_name)),
        'ocs_admin/campaign/' . $campaign_id . '/rule',
        $caption, t('Delete'));
}

function ocs_admin_campaign_cond_delete_confirm_submit( $form, &$form_state)
{
    $campaign_id = $form['#campaign_id'];
    $cond_id = $form['#cond_id'];
    $cond_name = $form['#cond_name'];
    ocs_admin_campaign_condition_delete( $cond_id);

    drupal_set_message( t('The condition "%key" has been removed from the Campaign.', 
			array( '%key' => $cond_name)));

    $form_state['redirect'] = 'ocs_admin/campaign/' . $campaign_id . '/rule';
}

function ocs_admin_campaign_condition_delete( $cond_id)
{
    db_set_active( 'ocsdb');

	// delete event from campaign
	$result = db_delete( 'ocs_campaign_conditions')
		->condition( 'cond_id', $cond_id, '=')
		->execute();
	dpm( $result, 'ocs_campaign_condition result');

    db_set_active( 'default');
}

function ocs_admin_campaign_cond_load( $cond_id)
{
    db_set_active( 'ocsdb');

    $query = db_select( 'ocs_campaign_conditions', 'c');
    $result = $query->condition( 'c.cond_id', $cond_id, '=')
        ->fields( 'c')
        ->execute()
        ->fetchAssoc();
 
    db_set_active( 'default');

	return $result;
}


/*
   add or delete conditions

   when adding AND or OR condition : AND/add, OR/add
   when deleting condition: <id>/delete
   */
function ocs_admin_campaign_condition_add( $campaign_id, $js, $cond_id, $op)
{
	if ( $op == 'delete') {
		ocs_admin_campaign_condition_delete( $cond_id);
	}
	else {	// add
		// add AND condition
		$cond = array(
			'cond_id' => NULL,
			'campaign_id' => $campaign_id,
			'event_id' => 0,
			'param_id' => 0,
			'param_name' => 'AND',
			'operator' => 'AND',
			'value' => NULL,
			'cond_name' => strtoupper($cond_id),
		);
		ocs_admin_campaign_condition_save( $cond);
	}

	$form = drupal_get_form( 'ocs_admin_campaign_rule_form', $campaign_id);
    $header = array(
        t('Name'),
        t('Weight'),
        array( 'data' => t('Operations'), 'colspan' => '3'),
    );

    // event table
    $output = '<div id="ocs_admin_campaign_cond_div">'. 
		ocs_admin_tree_table_theme( $form, $header) . '</div>' ;

	if ( $js) {
		ctools_include('ajax');
		$commands = array();
		$commands[] = ajax_command_replace( '#ocs_admin_campaign_cond_div', $output);
		print ajax_render( $commands);
		exit;
	}
	else {
		return $output;
	}
}
